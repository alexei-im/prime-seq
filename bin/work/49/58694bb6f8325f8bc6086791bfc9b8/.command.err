Multicore support not enabled. Proceeding with single-core trimming.
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.9
single-core operation.
igzip detected. Using igzip for decompressing

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> SRR003_1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	2	AGATCGGAAGAGC	10000	0.02
smallRNA	0	TGGAATTCTCGG	10000	0.00
Nextera	0	CTGTCTCTTATA	10000	0.00
Using Illumina adapter for trimming (count: 2). Second best hit was smallRNA (count: 0)

Writing report to 'SRR003_1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: SRR003_1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.10
Cutadapt version: 4.9
Number of cores used for trimming: 1
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.9). Setting -j 1
Writing final adapter and quality trimmed output to SRR003_1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file SRR003_1.fastq.gz <<< 
This is cutadapt 4.9 with Python 3.12.7
Command line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC SRR003_1.fastq.gz
Processing single-end reads on 1 core ...
Finished in 0.170 s (17.033 µs/read; 3.52 M reads/minute).

=== Summary ===

Total reads processed:                  10,000
Reads with adapters:                     3,150 (31.5%)
Reads written (passing filters):        10,000 (100.0%)

Total basepairs processed:       280,000 bp
Quality-trimmed:                     243 bp (0.1%)
Total written (filtered):        274,718 bp (98.1%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 3150 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 32.5%
  C: 32.8%
  G: 22.1%
  T: 12.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	1891	2500.0	0	1891
2	727	625.0	0	727
3	478	156.2	0	478
4	49	39.1	0	49
8	2	0.2	0	2
11	1	0.0	1	1
18	1	0.0	1	1
19	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: SRR003_1.fastq.gz
=============================================
10000 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to 'SRR003_2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: SRR003_2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.10
Cutadapt version: 4.9
Number of cores used for trimming: 1
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.9). Setting -j -j 1
Writing final adapter and quality trimmed output to SRR003_2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file SRR003_2.fastq.gz <<< 
This is cutadapt 4.9 with Python 3.12.7
Command line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC SRR003_2.fastq.gz
Processing single-end reads on 1 core ...
Finished in 0.362 s (36.189 µs/read; 1.66 M reads/minute).

=== Summary ===

Total reads processed:                  10,000
Reads with adapters:                     4,874 (48.7%)
Reads written (passing filters):        10,000 (100.0%)

Total basepairs processed:       940,000 bp
Quality-trimmed:                   3,096 bp (0.3%)
Total written (filtered):        929,362 bp (98.9%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4874 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 64.2%
  C: 14.4%
  G: 10.0%
  T: 11.4%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	4128	2500.0	0	4128
2	515	625.0	0	515
3	121	156.2	0	121
4	31	39.1	0	31
5	7	9.8	0	7
6	6	2.4	0	6
7	1	0.6	0	1
8	4	0.2	0	4
9	4	0.0	0	4
10	3	0.0	1	2 1
11	1	0.0	1	1
12	7	0.0	1	3 4
14	4	0.0	1	2 2
15	2	0.0	1	2
17	3	0.0	1	3
18	1	0.0	1	0 1
19	3	0.0	1	2 1
20	1	0.0	1	0 1
23	4	0.0	1	3 1
24	2	0.0	1	1 1
26	1	0.0	1	1
27	2	0.0	1	1 1
29	2	0.0	1	1 1
31	1	0.0	1	1
32	1	0.0	1	0 1
33	2	0.0	1	2
36	3	0.0	1	2 1
37	1	0.0	1	1
39	1	0.0	1	1
41	1	0.0	1	1
44	1	0.0	1	0 1
48	1	0.0	1	1
51	1	0.0	1	1
68	1	0.0	1	1
69	1	0.0	1	1
74	2	0.0	1	2
77	1	0.0	1	1
84	1	0.0	1	1
85	1	0.0	1	1
88	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: SRR003_2.fastq.gz
=============================================
10000 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files SRR003_1_trimmed.fq.gz and SRR003_2_trimmed.fq.gz
file_1: SRR003_1_trimmed.fq.gz, file_2: SRR003_2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: SRR003_1_trimmed.fq.gz and SRR003_2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to SRR003_1_val_1.fq.gz
Writing validated paired-end Read 2 reads to SRR003_2_val_2.fq.gz

Total number of sequences analysed: 10000

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 4 (0.04%)


  >>> Now running FastQC on the validated data SRR003_1_val_1.fq.gz<<<

Started analysis of SRR003_1_val_1.fq.gz
Approx 10% complete for SRR003_1_val_1.fq.gz
Approx 20% complete for SRR003_1_val_1.fq.gz
Approx 30% complete for SRR003_1_val_1.fq.gz
Approx 40% complete for SRR003_1_val_1.fq.gz
Approx 50% complete for SRR003_1_val_1.fq.gz
Approx 60% complete for SRR003_1_val_1.fq.gz
Approx 70% complete for SRR003_1_val_1.fq.gz
Approx 80% complete for SRR003_1_val_1.fq.gz
Approx 90% complete for SRR003_1_val_1.fq.gz

  >>> Now running FastQC on the validated data SRR003_2_val_2.fq.gz<<<

Started analysis of SRR003_2_val_2.fq.gz
Approx 10% complete for SRR003_2_val_2.fq.gz
Approx 20% complete for SRR003_2_val_2.fq.gz
Approx 30% complete for SRR003_2_val_2.fq.gz
Approx 40% complete for SRR003_2_val_2.fq.gz
Approx 50% complete for SRR003_2_val_2.fq.gz
Approx 60% complete for SRR003_2_val_2.fq.gz
Approx 70% complete for SRR003_2_val_2.fq.gz
Approx 80% complete for SRR003_2_val_2.fq.gz
Approx 90% complete for SRR003_2_val_2.fq.gz
Deleting both intermediate output files SRR003_1_trimmed.fq.gz and SRR003_2_trimmed.fq.gz

====================================================================================================

